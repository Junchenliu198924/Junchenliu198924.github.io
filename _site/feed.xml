<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Supremeliu Blog</title>
    <description>techbolg record mylife</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 18 May 2017 01:28:03 +0800</pubDate>
    <lastBuildDate>Thu, 18 May 2017 01:28:03 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>记一个springmvc整合websocket的例子</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;em&gt;好久没有更新自己的技术blog了，自己的项目碰到了瓶颈，自己这段时间也有点迷失，自己也在尽量的调整，自己的路该怎么走老实说以后的路我现在都没有的想好。感觉自己还是喜欢编程。自己总结了这段时间非常低效的症结究竟在哪儿，我想原因还是因为自己没有明确目标。&lt;/em&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;em&gt;我觉得每天写点东西是非常的有意义的，至少回顾下自己做了些什么东西，所以今天开始我尽量也会让自己每天都写点东西记录下自己。希望自己能够逐步改善。现在自己的工作比较杂，但是自己还是觉得应该把它做好，自己有时还是觉得有点懈怠有点提不起劲的感觉，希望这种情绪明天起不要再有了，我希望自己能够踏实一步一步的向前进，我相信自己一定可以的。&lt;/em&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;em&gt;这几天自己一直想把服务器上面的日志能够实时在web的页面输出，所以咨询了些做开发的朋友，朋友建议如果实时性要求比较高的可以用的 websocket ，马上上网查了下这个东西，类似于长连接，基于tcp协议，我自己理解websocket好处就是一旦建立了连接客户端服务器端不管哪一端都可以主动的推送信息给一方，和http一问一答的方式还是有它的优势后面几天我会把从服务器端读取的信息用websocket在页面实时的输出，下面是网上抄的一个列子（非常感谢作者分享），因为自己的项目运用的springmvc的架构这个列子正是整合了springmvc 的架构来做websocket的后台的处理&lt;/em&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1、&lt;a href=&quot;#build1&quot;&gt;加入websocket整合springmvc所用到的maven依赖&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2、&lt;a href=&quot;#build2&quot;&gt;整合插件到项目中去&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;3、&lt;a href=&quot;#build3&quot;&gt;前端页面代码运行效果&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p id=&quot;build1&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;1所用到的maven包&quot;&gt;1、所用到的maven包&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;下面列出了websocket整合websocket所用到的依赖包&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-websocket&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;4.1.4.RELEASE&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;


  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;spring-messaging&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;4.3.8.RELEASE&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build2&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;2整合插件到项目中去&quot;&gt;2、整合插件到项目中去&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;springmvc服务器端每次握手前后触发事件类（tcp连接握手前后各在控制台输出一条信息）：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  package com.bocim.maintaince.websocketTest;
	
  /**
   * Created by liujunchen on 2017/5/16.
   */
	
  import java.util.Map;
	
  import org.springframework.http.server.ServerHttpRequest;
  import org.springframework.http.server.ServerHttpResponse;
  import org.springframework.web.socket.WebSocketHandler;
  import org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor;
	
  public class HandshakeInterceptor extends HttpSessionHandshakeInterceptor{
      @Override
      public boolean beforeHandshake(ServerHttpRequest request,
                                     ServerHttpResponse response, WebSocketHandler wsHandler,
                                     Map&amp;lt;String, Object&amp;gt; attributes) throws Exception {
          System.out.println(&quot;Before Handshake&quot;);
          return super.beforeHandshake(request, response, wsHandler, attributes);
      }
      @Override
      public void afterHandshake(ServerHttpRequest request,
                                 ServerHttpResponse response, WebSocketHandler wsHandler,
                                 Exception ex) {
          System.out.println(&quot;After Handshake&quot;);
          super.afterHandshake(request, response, wsHandler, ex);
      }
	
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;声明的对应的websocket请求处理类：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  package com.bocim.maintaince.websocketTest;
  /**
   * Created by liujunchen on 2017/5/16.
   */
  import org.springframework.web.socket.TextMessage;
  import org.springframework.web.socket.WebSocketSession;
  import org.springframework.web.socket.handler.TextWebSocketHandler;
  public class WebsocketEndPoint extends TextWebSocketHandler {
      @Override
      protected void handleTextMessage(WebSocketSession session,
                                       TextMessage message) throws Exception {
          super.handleTextMessage(session, message);
          //编辑发送的内容
          TextMessage returnMessage = new TextMessage(message.getPayload()+&quot; received at server&quot;);
          session.sendMessage(returnMessage);
      }
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;配置一个springApplication配置文件用来的初始化处理bean，以及映射对应的处理地址&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这边mapper进入springmvc后地址为 /websocket(并且加入过滤类为上面声明的HandshakeInterceptor过滤类)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xmlns:websocket=&quot;http://www.springframework.org/schema/websocket&quot;
        xsi:schemaLocation=&quot;
         http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/websocket
         http://www.springframework.org/schema/websocket/spring-websocket.xsd&quot;&amp;gt;
	
     &amp;lt;bean id=&quot;websocket&quot; class=&quot;com.bocim.maintaince.websocketTest.WebsocketEndPoint&quot;/&amp;gt;
     &amp;lt;websocket:handlers&amp;gt;
         &amp;lt;websocket:mapping path=&quot;/websocket&quot; handler=&quot;websocket&quot;/&amp;gt;
         &amp;lt;websocket:handshake-interceptors&amp;gt;
             &amp;lt;bean class=&quot;com.bocim.maintaince.websocketTest.HandshakeInterceptor&quot;/&amp;gt;
         &amp;lt;/websocket:handshake-interceptors&amp;gt;
     &amp;lt;/websocket:handlers&amp;gt;
 &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;服务器端springmvc的websocket已经配置完成，接下来就是前端jsp页面&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;页面中核心发起websocket连接有两种一种是用传统的websocket连接，还有是用sockJS（一种封装了websocket更加上层的传输协议）关键代码如下：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   ws = (url.indexOf('sockjs') != -1) ?
                  new SockJS(url, undefined, {protocols_whitelist: transports}) : new WebSocket(url);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;webSocketTest.jsp代码如下：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;WebSocket/SockJS Echo Sample (Adapted from Tomcat's echo sample)&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;style &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;#connect-container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;nf&quot;&gt;#connect-container&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;nf&quot;&gt;#console-container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;margin-left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;nf&quot;&gt;#console&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;border&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#CCCCCC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;border-right-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;border-bottom-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#999999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;170px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;overflow-y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;nf&quot;&gt;#console&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
	
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://cdn.sockjs.org/sockjs-0.3.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
	
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[];&lt;/span&gt;
	
          &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setConnected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'connect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'disconnect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'echo'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;disabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Select whether to use W3C WebSocket or SockJS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
              &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sockjs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SockJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;undefined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;protocols_whitelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;transports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	
              &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onopen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;setConnected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Info: connection opened.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Received: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;setConnected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Info: connection closed.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;setConnected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Sent: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;ws&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'connection not established, please connect.'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;urlPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;urlPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sockjs'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;urlPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sockJsTransportSelect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'visible'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'http:'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ws://'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;urlPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'wss://'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;urlPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'sockJsTransportSelect'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;visibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'hidden'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateTransport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;transports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transport&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'all'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;transport&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
          &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'console'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wordWrap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'break-word'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;childNodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollTop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;color: #ff0000&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Seems your browser doesn't support Javascript! Websockets
      rely on Javascript being enabled. Please enable
      Javascript and reload this page!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;connect-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radio1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;group1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;updateUrl('/service/websocket');&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radio1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;W3C WebSocket&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;br&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radio2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radio&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;group1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;updateUrl('/service/websocket');&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;radio2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;SockJS&lt;span class=&quot;nt&quot;&gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sockJsTransportSelect&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;visibility:hidden;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&amp;gt;&lt;/span&gt;SockJS transport:&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onchange=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;updateTransport(this.value)&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;all&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;websocket&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;websocket&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xhr-polling&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;xhr-polling&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jsonp-polling&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;jsonp-polling&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xhr-streaming&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;xhr-streaming&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iframe-eventsource&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;iframe-eventsource&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;iframe-htmlfile&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;iframe-htmlfile&lt;span class=&quot;nt&quot;&gt;&amp;lt;/option&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;connect&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;connect();&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Connect&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disconnect&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disabled&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disconnect();&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Disconnect&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width: 350px&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Here is a message!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;echo&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;echo();&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;disabled=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;disabled&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Echo message&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;console-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build3&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;3代码运行效果&quot;&gt;3、代码运行效果&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;websocket 方式和 socketjs  方式  选择连接输出：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/588926/11dfc7e701ace24a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i4.buimg.com/588926/13b33d3c5df85d23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;毫无疑问websocket的连接模式实时性更加好，当需求需要一些实时响应的时候我觉得应该采用这种连接方式来完成，接下来我会尝试用socket的连接的方式来完成日志实时输出到web客户端。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 17 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/17/java-springmvc-websocket/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/17/java-springmvc-websocket/</guid>
        
        <category>spring</category>
        
        <category>java</category>
        
        <category>web</category>
        
        <category>js</category>
        
        
      </item>
    
      <item>
        <title>表格展示控件datatable使用小结</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;好久没有更新了 ，自己这10天也没有闲着因为看到市面上面的表格的控件基本用的都是easyui 的，那个界面个人不大喜欢的，自己项目用的ui模板里面使用了datatable这个jquery控件，觉得功能也很强大所以就拿来使用，非常感谢原作者。&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1、&lt;a href=&quot;#build1&quot;&gt;datatable项目环境准备&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2、&lt;a href=&quot;#build2&quot;&gt;整合插件到项目中去&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;3、&lt;a href=&quot;#build3&quot;&gt;datatable插件运用小结&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1datatable项目环境准备&quot;&gt;1、datatable项目环境准备&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;这个插件功能非常齐全，对于我这种小项目完全能够满足我的需求，&lt;a href=&quot;https://datatables.net/&quot;&gt;DataTables官方地址&lt;/a&gt; ,在官方的文档中当然先看Example中，然后再去找对应参数说明 这点很重要！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用到的插件可以官方下载：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/DataTables/datatables.css&quot;&amp;gt;
 
  &amp;lt;script type=&quot;text/javascript&quot; charset=&quot;utf8&quot; src=&quot;/DataTables/datatables.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;因为这次项目为后台cms系统 文档和例子大部分只要server-side服务器端配置即可！&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/567571/c5e8871120ecafce.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在example中找到服务器端的最基础处理表格的写法。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/567571/186ab79a4903b417.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下面是表格的展示效果。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://i1.piimg.com/567571/a59175f9cc3a56cc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build2&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;2整合插件到项目中去&quot;&gt;2、整合插件到项目中去&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;我自己选择了文档中的example–&amp;gt;Server-side –&amp;gt; Row details  的接触代码上面来编写自己的代码&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对应的html代码 如下,这边模态弹出窗口代码省略了，如具体写法很简单 参考 bootstrap–&amp;gt;modal即可自定义：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;table class=&quot;table table-striped table-bordered table-hover table-checkable order-column&quot; id=&quot;sample_1&quot;&amp;gt;
                          &amp;lt;thead&amp;gt;
                          &amp;lt;tr&amp;gt;
                              &amp;lt;th&amp;gt; 任务号 &amp;lt;/th&amp;gt;
                              &amp;lt;th&amp;gt; 任务名 &amp;lt;/th&amp;gt;
                              &amp;lt;th&amp;gt; 任务种类 &amp;lt;/th&amp;gt;
                              &amp;lt;th&amp;gt; 创建人 &amp;lt;/th&amp;gt;
                              &amp;lt;th&amp;gt; 创建时间 &amp;lt;/th&amp;gt;
                              &amp;lt;th&amp;gt; 操作 &amp;lt;/th&amp;gt;
                          &amp;lt;/tr&amp;gt;
                          &amp;lt;/thead&amp;gt;
   &amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;页面中自己加入了modal的弹出修改框，具体的js代码如下：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;script&amp;gt;
          //初始化对应datatable
          $(document).ready(function() {
            var dt=   $('#sample_1').DataTable( {
                      &quot;processing&quot;: true,
                     &quot;serverSide&quot;: true,
                  &quot;ajax&quot;: {
                      &quot;url&quot;: &quot;/service/maintainceTask/dbtaskquery&quot;,
                      &quot;data&quot;: function (d) {
                          d.createdBy = &quot;${user.username}&quot;;
                          // d.custom = $('#myInput').val();
                          // etc
                      }},
                      &quot;order&quot;: [[4, 'desc']],
                      &quot;columns&quot;: [
                          {&quot;data&quot;: &quot;taskId&quot;},
                          {&quot;data&quot;: &quot;taskName&quot;},
                          {&quot;data&quot;: &quot;taskType&quot;},
                          {&quot;data&quot;: &quot;createdBy&quot;},
                          {&quot;data&quot;: &quot;created&quot;},
                          {
                               &quot;class&quot;:      &quot;details-control&quot;,
                              &quot;orderable&quot;: true   ,
                              &quot;data&quot;:null,
                              &quot;render&quot;: function ( data, type ) {
                                 // return '&amp;lt;a href=&quot;'+data+'&quot;&amp;gt;编辑|&amp;lt;/a&amp;gt;&amp;lt;a&amp;gt;查看|&amp;lt;/a&amp;gt;&amp;lt;a&amp;gt;删除&amp;lt;/a&amp;gt;';
                               return &quot;&amp;lt;button type='button' class='btn green' data-toggle='modal' data-target='#myModal' &amp;gt;修改&amp;lt;/button&amp;gt;&quot; +
                                      &quot;&amp;lt;button type='button' class='btn red'  data-toggle='modal' data-target='#myDeleteModal'  &amp;gt;删除&amp;lt;/button&amp;gt;&quot;  +
                                      &quot;&amp;lt;button type='button' class='btn green' &amp;gt;查看&amp;lt;/button&amp;gt;&quot;
                              }
                          }
                      ]
              }
               );
              // Array to track the ids of the details displayed rows
              var detailRows = [];
              $('#sample_1 tbody').on( 'click', 'tr td.details-control', function () {
                  var tr = $(this).closest('tr');
                  var row = dt.row( tr );
                  var idx = $.inArray( tr.attr('id'), detailRows );

                  if ( row.child.isShown() ) {
                      tr.removeClass( 'details' );
                      row.child.hide();

                      // Remove from the 'open' array
                      detailRows.splice( idx, 1 );
                  }
                  else {
                      tr.addClass( 'details' );
                      row.child( format( row.data() ) ).show();

                      // Add to the 'open' array
                      if ( idx === -1 ) {
                          detailRows.push( tr.attr('id') );
                      }
                  }
                  //把对应对象信息传入到对应的modal中去
                  synModal(row.data());
              } );

              // On each draw, loop over the `detailRows` array and show any child rows
              dt.on( 'draw', function () {
                  $.each( detailRows, function ( i, id ) {
                      $('#'+id+' td.details-control').trigger( 'click' );
                  } );
              } );
          } );

          //把记录子信息输出到对应的子表单中
          function format ( d ) {
              return  '数据库类型:'+d.dbConfig.dbType+'&amp;lt;br&amp;gt;'+
                      '数据库地址:'+d.dbConfig.dbIp+'&amp;lt;br&amp;gt;'+
                      '数据库端口:'+d.dbConfig.dbPort+'&amp;lt;br&amp;gt;'+
                      '数据库名称:'+d.dbConfig.dbName+'&amp;lt;br&amp;gt;'+
                      '数据库用户名:'+d.dbConfig.dbUsername;
          }
            
           //向模态弹出框中框中传值。
          function synModal(f) {
              //向模态框中传值
              $('input[name=&quot;taskName&quot;]').val(f.taskName);
              $('input[name=&quot;dbConfig.dbType&quot;]').val(f.dbConfig.dbType);
              $('input[name=&quot;dbConfig.dbPort&quot;]').val(f.dbConfig.dbPort);
              $('input[name=&quot;dbConfig.dbName&quot;]').val(f.dbConfig.dbName);
              $('input[name=&quot;dbConfig.dbUsername&quot;]').val(f.dbConfig.dbUsername);
              $('input[name=&quot;dbConfig.dbPassword&quot;]').val(f.dbConfig.dbPassword);
              $('input[name=&quot;dbConfig.dbIp&quot;]').val(f.dbConfig.dbIp);
              $('#dbContent').val(f.dbContent);
              $('input[name=&quot;taskId&quot;]').val(f.taskId);
              $('input[name=&quot;dbConfig.dbId&quot;]').val(f.dbConfig.dbId);
              $('input[name=&quot;taskType&quot;]').val(f.taskType);
              $(&quot;h4.modal-delete&quot;).html(&quot;确定要删除&quot;+f.taskId+&quot;?&quot;);
              $('input[name=&quot;deleteId&quot;]').val(f.taskId);
          }
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查看文档的请求接口文档，弄清楚传递json字符串的格式，对应的文档在 &lt;a href=&quot;https://datatables.net/manual/server-side&quot;&gt;mannual&lt;/a&gt;  上面  有详尽的说明 分为  sendData  AND returnData，后端服务器按照要求接受返回具体的参数就行，这边就不详尽说明了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;效果展示：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://i4.buimg.com/567571/d53731d59f2eef04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://i4.buimg.com/567571/9fb79bd0cff7892c.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;http://i4.buimg.com/567571/49efc4ac30b5f7d3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build3&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;3datatable插件运用小结&quot;&gt;3、datatable插件运用小结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;自己项目中用到了很多优秀的开源jquery插件 ，非常好并且很美观,自己如果从头开始是非常难得，开发站在巨人的肩膀上，对于大多数开发者来说用好工具读懂文档的能力尤为重要！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;前端发展特别快速，语法也特别灵活，学习一定以实践为主， 在使用中学习并且不断的总结。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Wed, 22 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/22/java-springmvc-note5/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/22/java-springmvc-note5/</guid>
        
        <category>spring</category>
        
        <category>java</category>
        
        <category>web</category>
        
        <category>js</category>
        
        
      </item>
    
      <item>
        <title>java-web项目问题小结(4)</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;今天开始实现对应的系统模块功能，还是碰到了不少的困难，有一些问题还是需要点耐心才能发现，好在今天的问题都已经解决，接下来会加快模块功能的开发速度&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1、&lt;a href=&quot;&quot;&gt;mybastis使用oracle和mysql之间的区别&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2、&lt;a href=&quot;#build2&quot;&gt;本地虚拟机oracle连接缓慢问题的解决&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;3、&lt;a href=&quot;#build3&quot;&gt;抽象类在项目中运用实践&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1mybastis使用oracle和mysql之间的区别&quot;&gt;1、mybastis使用oracle和mysql之间的区别&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;因为项目需要使用对应的数据库oracle来开发，所以要将原先的mysql数据库的东西迁移到oracle，因为东西也不多，主要是mapper的映射sql语句的修改。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;迁移下来，发现了几个坑， 整理如下：&lt;/p&gt;

    &lt;p&gt;1）mysql 支持多路的执行select/dml(在url的后面添加参数allowMultiQueries=true) &lt;strong&gt;但是oracle不支持&lt;/strong&gt; 在一个标签内执行多条语句。
  2）mysql  mapper sql语句后面用  “;” 但是 oracle不需要“;” 如果写了“;”  执行就会报错&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build2&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;2本地虚拟机oracle连接缓慢问题的解决&quot;&gt;2、本地虚拟机oracle连接缓慢问题的解决&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;本地用vmware在自己的本地电脑搭建了一个oracle单点的环境， 起初java环境用oracle thin客户端连接的时候，每次大概需要一分钟才能建立正常的连接&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网上找到了解决方案 把对应  vmware虚拟机的网络resolve.conf  清理下 （把里面dbs解析的内容清空一下即可），这样thin客户端就能够正常访问本地oracle数据库了。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  enmoedu1*PROD1 ~ $ cat /etc/resolv.conf
  ; generated by /sbin/dhclient-script
  #search lan
  #nameserver 192.168.199.1
  enmoedu1*PROD1 ~ $
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build3&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;3抽象类在项目的运用实践&quot;&gt;3、抽象类在项目的运用实践&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;抽象类，今天我在项目中运用到了感觉主要益处在于能够让代码更加的简洁。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我今天开发的模块的运维任务的模块，其中涉及到 db任务以及服务器任务 ，我抽象一个运维任务的（抽象父类） ，   分别让  db运维任务  和  服务器运维任务  来继承， 并且打算在service层统一对父类进行初始化。 这样非常清晰，这只是一个小小的实践，但是可以看出这种复用的思想对于写好代码是非常有帮助的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 12 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/12/java-springmvc-note4/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/12/java-springmvc-note4/</guid>
        
        <category>spring</category>
        
        <category>java</category>
        
        <category>web</category>
        
        <category>js</category>
        
        
      </item>
    
      <item>
        <title>java-web项目问题小结(3)</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;今天还是继续折腾项目的前段基础页面，总算把登录和功能模块完成，并且确定以后写功能模块页面的展示架构。以下是我对于今天碰到问题的解决总结。&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;目录&quot;&gt;目录&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1、&lt;a href=&quot;&quot;&gt;用jquery局部加载登录页面&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2、&lt;a href=&quot;#build2&quot;&gt;用jquery的cookie插件来实现“记住密码” 功能&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;3、&lt;a href=&quot;#build3&quot;&gt;quartz的定时任务的学习&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1用jquery局部加载登录页面&quot;&gt;1、用jquery局部加载登录页面&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;主要思路就是运用jquery的局部onload的这个方法函数来实现对于主页面的特定div的重新加载，具体实现实现js如下：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; js：
 function loadConten(url) {
 //选取主要页面div对象重新加载新的页面地址
     $(&quot;div.page-content&quot;).load(url);
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build2&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;2用jquery的cookie插件来实现记住密码-功能&quot;&gt;2、用jquery的cookie插件来实现“记住密码” 功能&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在登录加载如下js内容：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  jQuery(document).ready(function() {
      Login.init();
      //初始化页时验证是否记住密码
      if ($.cookie(&quot;remember&quot;) == &quot;true&quot;) {
         /* $(&quot;input[name='remember']&quot;).attr(&quot;checked&quot;, true);
          $(&quot;input[name='username']&quot;).val($.cookie(&quot;userName&quot;));
          $(&quot;input[name='password']&quot;).val($.cookie(&quot;passWord&quot;));*/
          $(&quot;#remember&quot;).attr(&quot;checked&quot;, true);
          $(&quot;#realname&quot;).val($.cookie(&quot;userName&quot;));
          $(&quot;#realpassword&quot;).val($.cookie(&quot;passWord&quot;));
      }
  });
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用jquery-cookie-js插件，在正常登陆后保存密码到cookie中去，实现的方法js如下：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  function saveUserInfo() {
  //$(&quot;&quot;).is(':checked')    选中的对象 如果type为checkbox，就可以用  jquery的is(':checked')	
          if ($(&quot;#remember&quot;).is(':checked') == true) {
          var userName = $(&quot;#realname&quot;).val();
          var passWord = $(&quot;#realpassword&quot;).val();
          $.cookie(&quot;remember&quot;, &quot;true&quot;, { expires: 7 }); // 存储一个带7天期限的 cookie
          $.cookie(&quot;userName&quot;, userName, { expires: 7 }); // 存储一个带7天期限的 cookie
          $.cookie(&quot;passWord&quot;, passWord, { expires: 7 }); // 存储一个带7天期限的 cookie
      }
      else {
          $.cookie(&quot;rmbUser&quot;, &quot;false&quot;, { expires: -1 });
          $.cookie(&quot;userName&quot;, '', { expires: -1 });
          $.cookie(&quot;passWord&quot;, '', { expires: -1 });
      }
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build3&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;3quartz的定时任务学习&quot;&gt;3、quartz的定时任务学习&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;根据官方文档 如果你的项目也是用maven ，按照下面配置即可。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.quartz-scheduler&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;quartz&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.2.1&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.quartz-scheduler&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;quartz-jobs&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.2.1&amp;lt;/version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;记一次简单的quartz任务，主要实例化过程如下：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class SimpleExample {
	
  public void run() throws Exception {
    Logger log = LoggerFactory.getLogger(SimpleExample.class);
	
    log.info(&quot;------- Initializing ----------------------&quot;);
	
    // First we must get a reference to a scheduler
    SchedulerFactory sf = new StdSchedulerFactory();
    Scheduler sched = sf.getScheduler();
	
    log.info(&quot;------- Initialization Complete -----------&quot;);
	
    // computer a time that is on the next round minute
    Date runTime = evenMinuteDate(new Date());
	
    log.info(&quot;------- Scheduling Job  -------------------&quot;);
	
    // define the job and tie it to our HelloJob class
    JobDetail job = newJob(HelloJob.class).withIdentity(&quot;job1&quot;, &quot;group1&quot;).build();
	
    // Trigger the job to run on the next round minute
    Trigger trigger = newTrigger().withIdentity(&quot;trigger1&quot;, &quot;group1&quot;).startAt(runTime).build();
	
    // Tell quartz to schedule the job using our trigger
    sched.scheduleJob(job, trigger);
    log.info(job.getKey() + &quot; will run at: &quot; + runTime);
	
    // Start up the scheduler (nothing can actually run until the
    // scheduler has been started)
    sched.start();
	
    log.info(&quot;------- Started Scheduler -----------------&quot;);
	
    // wait long enough so that the scheduler as an opportunity to
    // run the job!
    log.info(&quot;------- Waiting 65 seconds... -------------&quot;);
    try {
      // wait 65 seconds to show job
      Thread.sleep(65L * 1000L);
      // executing...
    } catch (Exception e) {
      //
    }
	
    // shut down the scheduler
    log.info(&quot;------- Shutting Down ---------------------&quot;);
    sched.shutdown(true);
    log.info(&quot;------- Shutdown Complete -----------------&quot;);
  }
	
  public static void main(String[] args) throws Exception {
	
    SimpleExample example = new SimpleExample();
    example.run();   }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;}&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public HelloJob() {
}

/**
 * &amp;lt;p&amp;gt;
 * Called by the &amp;lt;code&amp;gt;{@link org.quartz.Scheduler}&amp;lt;/code&amp;gt; when a
 * &amp;lt;code&amp;gt;{@link org.quartz.Trigger}&amp;lt;/code&amp;gt; fires that is associated with
 * the &amp;lt;code&amp;gt;Job&amp;lt;/code&amp;gt;.
 * &amp;lt;/p&amp;gt;
 * 
 * @throws JobExecutionException
 *             if there is an exception while executing the job.
 */
public void execute(JobExecutionContext context)
    throws JobExecutionException {

    // Say Hello to the World and display the date/time
    _log.info(&quot;Hello World! - &quot; + new Date());
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;小结&quot;&gt;小结&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;js的jquery非常的好用，在我的项目中模块都需要和这个监控挂钩
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Tue, 07 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/07/java-springmvc-note3/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/07/java-springmvc-note3/</guid>
        
        <category>spring</category>
        
        <category>java</category>
        
        <category>web</category>
        
        <category>js</category>
        
        
      </item>
    
      <item>
        <title>java-web项目问题小结(2)</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;今天在研究mybatis的数据映射文件mapper的写法，发现mybatis的映射非常的完善，也不是很难懂，因为可以自己写sql绑定自由度是非常高的，今天主要学习了下select的绑定。&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;1mybatis查询绑定内嵌对象注意要点&quot;&gt;1、mybatis查询绑定内嵌对象注意要点&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;spring中mybatis的配置文件：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
        xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;
        xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;
        xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
        xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd&quot;&amp;gt;
	
     &amp;lt;bean class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&amp;gt;
         &amp;lt;!-- 数据源 --&amp;gt;
         &amp;lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&amp;gt;
         &amp;lt;!-- 配置Mybatis的全局配置文件 --&amp;gt;
         &amp;lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis/mybatis-config.xml&quot;/&amp;gt;
         &amp;lt;!-- 配置mapper.xml文件 --&amp;gt;
          &amp;lt;property name=&quot;mapperLocations&quot; value=&quot;classpath:mybatis/mapper/*.xml&quot;/&amp;gt;
         &amp;lt;!-- 别名包 --&amp;gt;
         &amp;lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.bocim.maintaince.pojo&quot;/&amp;gt;
     &amp;lt;/bean&amp;gt;
     &amp;lt;!-- mapper接口的扫描器 --&amp;gt;
     &amp;lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&amp;gt;
         &amp;lt;property name=&quot;basePackage&quot; value=&quot;com.bocim.maintaince.mapper&quot;/&amp;gt;
     &amp;lt;/bean&amp;gt;
     &amp;lt;bean id=&quot;MUserDAO&quot; class=&quot;com.bocim.maintaince.dao.MUserDAO&quot;&amp;gt;&amp;lt;/bean&amp;gt;
 &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建对应的接口类后 (例如:MuserMapper)，接下来我们主要运用mapper将sql语句映射成java的对象，具体的用法请参考&lt;a href=&quot;http://www.mybatis.org/mybatis-3/index.html&quot;&gt;spring官方文档&lt;/a&gt;,下面是我要映射的java pojo类。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; public class Muser {
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private  Long id  ;
     private  String username    ;
     private  String password  ;
     private  String phone  ;
     private  String email  ;
     @JsonDeserialize(using = DateDeserializer.class)
     private Date createTime;//创建时间
     @JsonDeserialize(using = DateDeserializer.class)
     private Date updateTime;//更新时间
     private List&amp;lt;Userprivilege&amp;gt;   userprivileges  ;  //用户菜单权限
     .........
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在对应的mapper文件中绑定对应sql语句。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;
          &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;mapper&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;namespace=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.bocim.maintaince.mapper.MuserMapper&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--可以引用的sql变量模板--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--&amp;lt;sql id=&quot;tableName&quot;&amp;gt;maintaince_user&amp;lt;/sql&amp;gt;--&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;resultMap&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pojoResultMap2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Muser&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;autoMapping=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;result&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;collection&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userprivileges&quot;&lt;/span&gt;   &lt;span class=&quot;na&quot;&gt;ofType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Userprivilege&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moduleId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moduleid&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;result&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moduleName&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;modulename&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;result&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moduleUser&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;moduleuser&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/collection&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/resultMap&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;select&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;queryUserPrivilegeByUsername&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;resultMap=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pojoResultMap2&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   select   a.id as id ,
      a.username as username ,
      a.password   ,
      a.phone    ,
      a.email,
      a.created,
      a.updated,
      b.module_id as   moduleid ,
      b.user_name as    moduleuser ,
      c.module_name as modulename
      from maintaince_user  a  LEFT JOIN   maintaince_privilege b ON a.username=b.user_name LEFT JOIN maintaince_module c on b.module_id=c.id
      where  a.username=#{username}
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/select&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/mapper&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;小结&lt;/p&gt;

    &lt;p&gt;在用mybatis 绑定内嵌java查询对象，要搞清楚单条sql中字段和java对象属性之间的n 对 n 的关系，并且关联对象往往就是主键或者是具有唯一性的字段，在mapper映射关系中要用&lt;id&gt;来配置。这一部分的编写还是要多多参考官方文档的写法，文档的例子都很实用，务必好好阅读收藏！对于有一定sql基础的人员来说很方便，&lt;/id&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/06/java-springmvc-note2/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/06/java-springmvc-note2/</guid>
        
        <category>spring</category>
        
        <category>java</category>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>java-web项目问题小结(1)</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;最近自己在做一个自己的一个项目的，今天基本把框架给打好了，因为是javaweb的应用所以我采用了主流的框架 springMVC + spring + mybatis的主流框架，今天在做的过程中碰到了不少问题，这边做下今天的总结&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;导航&quot;&gt;导航&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1、&lt;a href=&quot;&quot;&gt;关于spring-mvc 配置文件资源加载问题解决&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2、&lt;a href=&quot;#build2&quot;&gt;jsp服务器端el和客户端js变量传递方法&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1关于spring-mvc-配置文件资源加载问题解决&quot;&gt;1、关于spring-mvc 配置文件资源加载问题解决&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在项目中想要运用对应的@value注解来获取env.properties中的值：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; @Controller
 @RequestMapping(&quot;page&quot;)
 public class PageController {
     @Value(&quot;${itmaintaince_SSO_URL}&quot;)
     public   String  itmaintaintaince_SSO_UTL;
     @RequestMapping(value = &quot;{pagename}&quot; , method = RequestMethod.GET)
     public String topage(@PathVariable(&quot;pagename&quot;)String pagename, HttpServletResponse response) throws IOException {
         String loginurl= itmaintaintaince_SSO_UTL+&quot;/public/login.html&quot; ;
         if (pagename.equals(&quot;login&quot;)){
             //转到对应的登录页面
             response.sendRedirect(loginurl);
             return null   ;
         }
	
         return  pagename  ;
     }
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;调试的过程发现没有取到itmaintaince_SSO_URL的值，但是在spring的启动文件里面已经配置了：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;bean class=&quot;org.springframework.beans.factory.config.PropertyPlaceholderConfigurer&quot;&amp;gt;
         &amp;lt;!-- 允许JVM参数覆盖 --&amp;gt;
         &amp;lt;!-- java -Djdbc.url=123 -jar xxx.jar --&amp;gt;
         &amp;lt;property name=&quot;systemPropertiesModeName&quot; value=&quot;SYSTEM_PROPERTIES_MODE_OVERRIDE&quot; /&amp;gt;
         &amp;lt;!-- 忽略没有找到的资源文件 --&amp;gt;
         &amp;lt;property name=&quot;ignoreResourceNotFound&quot; value=&quot;true&quot; /&amp;gt;
         &amp;lt;!-- 配置资源文件 --&amp;gt;
         &amp;lt;property name=&quot;locations&quot;&amp;gt;
             &amp;lt;list&amp;gt;
                 &amp;lt;value&amp;gt;classpath:log4j.properties&amp;lt;/value&amp;gt;
                 &amp;lt;value&amp;gt;classpath:jdbc.properties&amp;lt;/value&amp;gt;
                 &amp;lt;value&amp;gt;classpath:env.properties&amp;lt;/value&amp;gt;
             &amp;lt;/list&amp;gt;
         &amp;lt;/property&amp;gt;
     &amp;lt;/bean&amp;gt;		
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;查资料后，解决方案为在spring-mvc的启动配置文件里面再加载相同的配置文件即可调用该资源，不能加载的原因也和spring的父子容器有关，具体结论如下：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1、spring容器初始化（所有的bean）之后，在当前的所在的容器中获取值，然后注入。&lt;/li&gt;
    &lt;li&gt;2、spring容器与spring-mvc的为父子容器，子容器能够访问父容器的资源（bean）示例：controller可以注入service&lt;/li&gt;
    &lt;li&gt;3、父容器不能访问子容器的资源（bean）&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p id=&quot;build2&quot;&gt;&lt;/p&gt;

&lt;h3 id=&quot;2记一次jsp服务器端el和客户端js变量传递方法&quot;&gt;2、记一次jsp服务器端el和客户端js变量传递方法&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;对应的js文件&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;script&amp;gt;
      $(function () {
          var aaa=new Array();
          //这边循环的把对应el表达式中的值加入到客户端js申明的变量数组中去
          &amp;lt;c:forEach items=&quot;${privelige}&quot; var=&quot;mm&quot;&amp;gt;
              aaa.push(&quot;${mm}&quot;);
          &amp;lt;/c:forEach&amp;gt;;
	
  //            var bb = aaa
              MT.checkShow(aaa) ;
      })
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/03/05/java-springmvc-note/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/05/java-springmvc-note/</guid>
        
        <category>spring</category>
        
        <category>java</category>
        
        <category>web</category>
        
        <category>js</category>
        
        
      </item>
    
      <item>
        <title>java-web跨域请求解决方案-httpclient</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;最近一直在学习前段的一些基本前端编程技巧，对于http请求资源的解决方法比较普遍的两种，一种是JSONP，还有另外一种就是今天要介绍的httpclient工具，httpclient是apach基金协会的一个顶级的开源项目&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;导航&quot;&gt;导航&lt;/h4&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;1、&lt;a href=&quot;&quot;&gt;httpclient工具发送请求（get/post)&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;2、&lt;a href=&quot;#build2&quot;&gt;httpclient建立连接时几个比较重要的参数config&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;3、&lt;a href=&quot;#build3&quot;&gt;httpclient整合spring mvc框架&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;4、&lt;a href=&quot;#build4&quot;&gt;封装对应的api service&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;1httpclient工具发送请求getpost&quot;&gt;1、httpclient工具发送请求（get/post）&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在maven中添加httpclient所用的到的对应工具包：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;dependency&amp;gt;
   		&amp;lt;groupId&amp;gt;org.apache.httpcomponents&amp;lt;/groupId&amp;gt;
   		&amp;lt;artifactId&amp;gt;httpclient&amp;lt;/artifactId&amp;gt;
   		&amp;lt;version&amp;gt;4.3.5&amp;lt;/version&amp;gt;
   	&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;httpclient发送get请求：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; package cn.itcast.httpclient;
	
 import java.net.URI;
	
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.utils.URIBuilder;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.apache.http.impl.client.HttpClients;
 import org.apache.http.util.EntityUtils;
	
 public class DoGETParam {
	
     public static void main(String[] args) throws Exception {
	
         // 创建Httpclient对象
         CloseableHttpClient httpclient = HttpClients.createDefault();
	
         // 定义请求的参数
         URI uri = new URIBuilder(&quot;http://www.baidu.com/s&quot;).setParameter(&quot;wd&quot;, &quot;java&quot;).build();
	
         System.out.println(uri);
	
         // 创建http GET请求
         HttpGet httpGet = new HttpGet(uri);
	
         CloseableHttpResponse response = null;
         try {
             // 执行请求
             response = httpclient.execute(httpGet);
             // 判断返回状态是否为200
             if (response.getStatusLine().getStatusCode() == 200) {
                 String content = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);
                 System.out.println(content);
             }
         } finally {
             if (response != null) {
                 response.close();
             }
             httpclient.close();
         }
	
     }
	
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;httpclient发送post请求：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  package cn.itcast.httpclient;
  import java.util.ArrayList;
  import java.util.List;
	
  import org.apache.http.NameValuePair;
  import org.apache.http.client.entity.UrlEncodedFormEntity;
  import org.apache.http.client.methods.CloseableHttpResponse;
  import org.apache.http.client.methods.HttpPost;
  import org.apache.http.impl.client.CloseableHttpClient;
  import org.apache.http.impl.client.HttpClients;
  import org.apache.http.message.BasicNameValuePair;
  import org.apache.http.util.EntityUtils;
	
  public class DoPOSTParam {
  public static void main(String[] args) throws Exception {
          // 创建Httpclient对象
          CloseableHttpClient httpclient = HttpClients.createDefault();
          // 创建http POST请求
          HttpPost httpPost = new HttpPost(&quot;http://www.oschina.net/search&quot;);
          // 设置2个post参数，一个是scope、一个是q
          List&amp;lt;NameValuePair&amp;gt; parameters = new ArrayList&amp;lt;NameValuePair&amp;gt;(0);
          parameters.add(new BasicNameValuePair(&quot;scope&quot;, &quot;project&quot;));
          parameters.add(new BasicNameValuePair(&quot;q&quot;, &quot;java&quot;));
          // 构造一个form表单式的实体
          UrlEncodedFormEntity formEntity = new UrlEncodedFormEntity(parameters);
          // 将请求实体设置到httpPost对象中
          httpPost.setEntity(formEntity);
          CloseableHttpResponse response = null;
          try {
              // 执行请求
              response = httpclient.execute(httpPost);
              // 判断返回状态是否为200
              if (response.getStatusLine().getStatusCode() == 200) {
                  String content = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);
                  System.out.println(content);
              }
          } finally {
              if (response != null) {
                  response.close();
              }
              httpclient.close();
          }
	
      }
	
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建立httpclient的连接池&lt;/p&gt;

    &lt;p&gt;public class HttpConnectManager {&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  public static void main(String[] args) throws Exception {
      PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
      // 设置最大连接数
      cm.setMaxTotal(200);
      // 设置每个主机地址的并发数
      cm.setDefaultMaxPerRoute(20);
      doGet(cm);
      doGet(cm);
  }

  public static void doGet(HttpClientConnectionManager cm) throws Exception {
      //从连接池中哪一个对应的连接
      CloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(cm).build();
      // 创建http GET请求
      HttpGet httpGet = new HttpGet(&quot;http://www.baidu.com/&quot;);

      CloseableHttpResponse response = null;
      try {
          // 执行请求
          response = httpClient.execute(httpGet);
          // 判断返回状态是否为200
          if (response.getStatusLine().getStatusCode() == 200) {
              String content = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);
              System.out.println(&quot;内容长度：&quot; + content.length());
          }
      } finally {
          if (response != null) {
              response.close();
          }
          // 此处不能关闭httpClient，如果关闭httpClient，连接池也会销毁
          // httpClient.close();
      }
  }
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;需要创建一个线程thread自动校验清理无效连接&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  package cn.itcast.httpclient;
	
  import org.apache.http.conn.HttpClientConnectionManager;
  import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
	
  /**
   * 单独请求对应的方法来关闭对应的请求连接
   *
   *
   */
  public class ClientEvictExpiredConnections {
	
      public static void main(String[] args) throws Exception {
          PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
          // 设置最大连接数
          cm.setMaxTotal(200);
          // 设置每个主机地址的并发数
          cm.setDefaultMaxPerRoute(20);
	
          new IdleConnectionEvictor(cm).start();
      }
	
      public static class IdleConnectionEvictor extends Thread {
	
          private final HttpClientConnectionManager connMgr;
	
          private volatile boolean shutdown;
	
          public IdleConnectionEvictor(HttpClientConnectionManager connMgr) {
              this.connMgr = connMgr;
          }
	
          @Override
          public void run() {
              try {
                  while (!shutdown) {
                      synchronized (this) {
                          wait(5000);
                          // 关闭失效的连接
                          connMgr.closeExpiredConnections();
                      }
                  }
              } catch (InterruptedException ex) {
                  // 结束
              }
          }
	
          public void shutdown() {
              shutdown = true;
              synchronized (this) {
                  notifyAll();
              }
          }
  }
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build2&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;2httpclient建立连接时几个比较重要的参数config&quot;&gt;2、httpclient建立连接时几个比较重要的参数config&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package cn.itcast.httpclient;

import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;

public class RequestConfigDemo {

    public static void main(String[] args) throws Exception {

        // 创建Httpclient对象
        CloseableHttpClient httpclient = HttpClients.createDefault();

        // 创建http GET请求
        HttpGet httpGet = new HttpGet(&quot;http://www.baidu.com/&quot;);

        // 构建请求配置信息
        RequestConfig config = RequestConfig.custom().setConnectTimeout(1000) // 创建连接的最长时间
                .setConnectionRequestTimeout(500) // 从连接池中获取到连接的最长时间
                .setSocketTimeout(10 * 1000) // 数据传输的最长时间
                .setStaleConnectionCheckEnabled(true) // 提交请求前测试连接是否可用
                .build();
        // 设置请求配置信息
        httpGet.setConfig(config);

        CloseableHttpResponse response = null;
        try {
            // 执行请求
            response = httpclient.execute(httpGet);
            // 判断返回状态是否为200
            if (response.getStatusLine().getStatusCode() == 200) {
                String content = EntityUtils.toString(response.getEntity(), &quot;UTF-8&quot;);
                System.out.println(content);
            }
        } finally {
            if (response != null) {
                response.close();
            }
            httpclient.close();
        }

    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p id=&quot;build3&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;3httpclient整合spring-mvc框架&quot;&gt;3、httpclient整合spring mvc框架&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;建立配置参数文件httpclient.properties&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  http.maxtotal=200
  http.setDefaultMaxPerRoute=20
  http.connectTimeout=1000
  http.socketTimeout= 10000
  http.connectionRequestTimeout=500
  http.staleConnectionCheckEnabled=true
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建立配置文件 applicationContext-httpClient.xml&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;
  &amp;lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&amp;gt;
	
       &amp;lt;!--定义连接管理器--&amp;gt;
      &amp;lt;bean id=&quot;connectionManager&quot;  class=&quot;org.apache.http.impl.conn.PoolingHttpClientConnectionManager&quot;&amp;gt;
          &amp;lt;!--最大连接数--&amp;gt;
          &amp;lt;property name=&quot;maxTotal&quot; value=&quot;${http.maxtotal}&quot;/&amp;gt;
          &amp;lt;!--主机并发数量--&amp;gt;
          &amp;lt;property name=&quot;defaultMaxPerRoute&quot; value=&quot;${http.setDefaultMaxPerRoute}&quot;/&amp;gt;
      &amp;lt;/bean&amp;gt;
      &amp;lt;bean  id=&quot;httpClientBuilder&quot; class=&quot;org.apache.http.impl.client.HttpClientBuilder&quot;&amp;gt;
          &amp;lt;property name=&quot;connectionManager&quot; ref=&quot;connectionManager&quot;/&amp;gt;
      &amp;lt;/bean&amp;gt;
      &amp;lt;!--多实例--&amp;gt;
      &amp;lt;bean class=&quot;org.apache.http.impl.client.CloseableHttpClient&quot; factory-bean=&quot;httpClientBuilder&quot;
            factory-method=&quot;build&quot; scope=&quot;prototype&quot;&amp;gt;&amp;lt;/bean&amp;gt;
	
      &amp;lt;bean id=&quot;requestConfigBuilder&quot; class=&quot;org.apache.http.client.config.RequestConfig.Builder&quot;&amp;gt;
          &amp;lt;!--创建连接的最长时间--&amp;gt;
          &amp;lt;property name=&quot;connectTimeout&quot; value=&quot;${http.connectTimeout}&quot;/&amp;gt;
          &amp;lt;!--数据传输的最长时间--&amp;gt;
          &amp;lt;property name=&quot;socketTimeout&quot; value=&quot;${http.socketTimeout}&quot;/&amp;gt;
          &amp;lt;!--从连接池中获取到连接的最长时间--&amp;gt;
          &amp;lt;property name=&quot;connectionRequestTimeout&quot; value=&quot;${http.connectionRequestTimeout}&quot;/&amp;gt;
          &amp;lt;!--提交请求前测试连接是否可用--&amp;gt;
          &amp;lt;property name=&quot;staleConnectionCheckEnabled&quot; value=&quot;${http.staleConnectionCheckEnabled}&quot;  /&amp;gt;
      &amp;lt;/bean&amp;gt;
      &amp;lt;!--请求配置对象(单列)--&amp;gt;
      &amp;lt;bean class=&quot;org.apache.http.client.config.RequestConfig&quot;
            factory-bean=&quot;requestConfigBuilder&quot; factory-method=&quot;build&quot;&amp;gt;&amp;lt;/bean&amp;gt;
            &amp;lt;!--定期关闭无效链接--&amp;gt;
      &amp;lt;bean class=&quot;com.ljpz.common.httpclient.IdleConnectionEvictor&quot;&amp;gt;
          &amp;lt;constructor-arg index=&quot;0&quot; ref=&quot;connectionManager&quot;/&amp;gt;
      &amp;lt;/bean&amp;gt;
  &amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p id=&quot;build4&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;4封装对应的api-service&quot;&gt;4、封装对应的api service&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package com.ljpz.common.service;
import com.ljpz.common.httpclient.HttpResult;
import org.apache.http.HttpStatus;
import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpDelete;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuilder;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.BeanFactoryAware;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.stereotype.Service;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * Created by liujunchen on 2016/12/12.
 */
@Service
public class ApiService implements BeanFactoryAware{
    //这个注解标记为对应可有可无
    @Autowired(required=false )
    private RequestConfig requestConfig;

    //spring初始化是会初始化一个beanFactory
    private  BeanFactory  beanFactory  ;
    /**
     * GET请求地址，响应200 ，返回响应的内容，响应为404  或者500 返回null
     * @param url
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     */
    public  String  doGet(String url ) throws ClientProtocolException,IOException ,URISyntaxException{
        // 创建http GET请求
        HttpGet httpGet = new HttpGet(url);
        httpGet.setConfig(requestConfig);
        CloseableHttpResponse response = null;
        try {
            // 执行请求
           response =getHttpclient().execute(httpGet);
            //返回状态码
            if(response.getStatusLine().getStatusCode()==200){
                return EntityUtils.toString(response.getEntity(),&quot;UTF-8&quot;) ;
            }
        } finally {
            if (response != null) {
                response.close();
            }
        }
        return null;
    }
    public  String doGet(String url , Map&amp;lt;String,String&amp;gt; params) throws  ClientProtocolException, IOException,URISyntaxException{
        //定义请求的参数
        URIBuilder   builder = new URIBuilder(url) ;
        for (Map.Entry&amp;lt;String,String&amp;gt;entry:params.entrySet()){
            builder.setParameter(entry.getKey(),entry.getValue());
        }
        return   this.doGet(builder.build().toString());
    }



    public  Integer doDelete (String url ) throws   ClientProtocolException,IOException ,URISyntaxException{
        //创建httpDelete 请求
        HttpDelete httpDelete  = new HttpDelete(url)  ;
        httpDelete.setConfig(requestConfig);
        CloseableHttpResponse response = null ;
        try {
            //执行请求
            response=getHttpclient().execute(httpDelete)  ;
            //返回状态码
            return  response.getStatusLine().getStatusCode()  ;
        }finally {
            if (response!=null){
                response.close();
            }
        }
    }
    public Integer  doDelete(String url ,Map&amp;lt;String,String&amp;gt;params) throws  ClientProtocolException, IOException,URISyntaxException{
        //定义请求的参数
        URIBuilder builder = new URIBuilder(url)  ;
        for (Map.Entry&amp;lt;String,String&amp;gt;entry:params.entrySet()){
            builder.setParameter(entry.getKey(),entry.getValue());
        }
        return  this.doDelete(builder.build().toString());
    }



    public HttpResult doPost(String url , Map&amp;lt;String , String &amp;gt;params ) throws  ClientProtocolException,IOException,URISyntaxException{
        // 创建http POST请求
        HttpPost httpPost = new HttpPost(url);
        httpPost.setConfig(requestConfig);
        if (null!=params){

            // 设置2个post参数，一个是scope、一个是q
            List&amp;lt;NameValuePair&amp;gt; parameters = new ArrayList&amp;lt;NameValuePair&amp;gt;(0);
            for (Map.Entry&amp;lt;String,String&amp;gt;entry:params.entrySet()){
                parameters.add(new BasicNameValuePair(entry.getKey(),entry.getValue()));
            }
            //构造一个form表单式的实体
            UrlEncodedFormEntity formEntity= new UrlEncodedFormEntity(parameters)  ;
            //将请求实体设置到httpPost对象中
            httpPost.setEntity(formEntity);
        }


        CloseableHttpResponse response = null;
        try {
            // 执行请求
            response = getHttpclient().execute(httpPost);
            return  new HttpResult(response.getStatusLine().getStatusCode(),EntityUtils.toString(response.getEntity(),&quot;UTF-8&quot;));
        } finally {
            if (response != null) {
                response.close();
            }
        }
    }
    public  HttpResult doPost(String url ) throws   ClientProtocolException,IOException,URISyntaxException{
        return  this.doPost(url, null );
    }
    
    private  CloseableHttpClient getHttpclient(){
        return this.beanFactory.getBean(CloseableHttpClient.class) ;
    }

    @Override
    public void setBeanFactory(BeanFactory beanFactory) throws BeansException {
        //该方法实在spring容器初始化时会调用该方法，传入beanFactory函数
        this.beanFactory=beanFactory;
    }
    /**
     * 带有json参数的POST请求
     *
     *
     * @param url
     * @param
     * @return
     * @throws ClientProtocolException
     * @throws IOException
     * @throws URISyntaxException
     */
    public HttpResult doPostJson(String url , String json) throws  ClientProtocolException,IOException,ClientProtocolException{
        HttpPost httpPost = new HttpPost(url);
        httpPost.setConfig(requestConfig);
        if (null!=json){
            StringEntity  stringEntity = new StringEntity(json, ContentType.APPLICATION_JSON);
            //将请求实体设置到httpPost对象中
            httpPost.setEntity(stringEntity);
        }


        CloseableHttpResponse response = null;
        try {
            // 执行请求
            response = getHttpclient().execute(httpPost);
            return  new HttpResult(response.getStatusLine().getStatusCode(),EntityUtils.toString(response.getEntity(),&quot;UTF-8&quot;));
        } finally {
            if (response != null) {
                response.close();
            }
        }
    }



}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
        <pubDate>Sun, 26 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/26/httprequesthttpclient/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/26/httprequesthttpclient/</guid>
        
        <category>实用教程</category>
        
        <category>java</category>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>java-web跨域请求解决方案-jsonp</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;最近一直在学习前端的一些基本编程技巧，对于http请求资源的解决方法比较普遍的两种，一种就是今天分享的JSONP，还有另外一种就是通过服务器端httpclient工具包进行请求获取资源（明天的内容有了~）&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;1用js加载的方式来解决不能跨域请求资源&quot;&gt;1、用js加载的方式来解决不能跨域请求资源&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;准备一个简单的jsp文件：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;%@page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
           pageEncoding=&quot;UTF-8&quot;%&amp;gt;
	
 &amp;lt;%
     out.print(&quot;{\&quot;abc\&quot;:123}&quot;);
 %&amp;gt;  返回为json字符串：

 {
     &quot;abc&quot;: 123
 }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新建一个html文件：&lt;/p&gt;

    &lt;p&gt;testforjsonp.htm:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/js/jquery-easyui-1.4.1/jquery.min.js&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	
	
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;dataType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;json&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8081/json.jsp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
             &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abc&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//能够正常返回json字符串&lt;/span&gt;
         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
     &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;浏览 本地地址 http://localhost:8081/testforjsonp.htm 资源都能被访问到（同域当然能够访问）&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cl.ly/01303s050J2S/Image%202017-02-24%20at%2001.04.36.png&quot; alt=&quot;&quot; /&gt;
  &lt;img src=&quot;https://cl.ly/3F3k1d3A3r0l/Image%202017-02-24%20at%2001.12.56.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把testforjsonp.htm中加载js的地址改下，放到另外的一个服务容器上面&lt;/p&gt;

    &lt;p&gt;修改js用http地址来获取js：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   &amp;lt;script type=&quot;text/javascript&quot; src=&quot;http://localhost:8081/js/jquery-easyui-1.4.1/jquery.min.js&quot; &amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;结果JavaScript的js资源能够正常加载，但是htm因为跨域原因浏览器报错，如下：&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cl.ly/3B0y331d3x3s/Image%202017-02-24%20at%2001.23.25.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把对应的ajax请求放在script请求资源的标签中&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8081/js/jquery-easyui-1.4.1/jquery.min.js&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	
	
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8081/json.jsp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;结果js加载资源能够正常的解析但由于json.jsp不是js的文本所欲报错&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cl.ly/3o2k313s0S44/Image%202017-02-24%20at%2001.32.42.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;把对应的json.jsp包装成js的结构&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;%@page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
            pageEncoding=&quot;UTF-8&quot;%&amp;gt;
	
  &amp;lt;%
      out.print(&quot;fun({\&quot;abc\&quot;:123})&quot;);
  %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;在对应的testforjsonp.htm中定义对应的function方法fun:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8081/js/jquery-easyui-1.4.1/jquery.min.js&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	
	
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8081/json.jsp&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;能够正常访问这个就是jsonp的原理！
  &lt;img src=&quot;https://cl.ly/1z1Z0u3b3X36/Image%202017-02-24%20at%2001.41.21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用call来传递回调函数，实现跨域访问&lt;/p&gt;

    &lt;p&gt;将json.jsp改写：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;%@page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;
            pageEncoding=&quot;UTF-8&quot;%&amp;gt;
	
  &amp;lt;%
      String callback= request.getParameter(&quot;callback&quot;);
      if (callback ==null|| &quot;&quot;.equals(callback)){
          out.print(&quot;{\&quot;abc\&quot;:123}&quot;);
      }
      else {
          out.print(callback+&quot;({\&quot;abc\&quot;:123})&quot;);
      }
  %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;testforjsonp.htm修改请求加入callback的参数：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8081/js/jquery-easyui-1.4.1/jquery.min.js&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	
	
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8081/json.jsp?callback=fun&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;https://cl.ly/1z1Z0u3b3X36/Image%202017-02-24%20at%2001.41.21.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在实际应用中使用JSONP&lt;/p&gt;

    &lt;p&gt;很简单只需在用ajax提供请求把参数dataType改为jsonp即可&lt;/p&gt;

    &lt;p&gt;testforjsonp.htm:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8081/js/jquery-easyui-1.4.1/jquery.min.js&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
	
	
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//前面的jquery加载正常&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ajax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;dataType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;jsonp&quot;&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8081/json.jsp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
              &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//能够正常返回json字符串&lt;/span&gt;
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;&lt;img src=&quot;https://cl.ly/1m313K0W3s3w/Image%202017-02-24%20at%2002.00.49.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 23 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/23/httprequestjsonp/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/23/httprequestjsonp/</guid>
        
        <category>实用教程</category>
        
        <category>java</category>
        
        <category>web</category>
        
        
      </item>
    
      <item>
        <title>用KindEditor套件实现文件上传功能</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;本文记录使用KindEditor的web组件实现界面的头像文件上传服务器中，项目基本架构为 spring-mvc  +   spring  +   mybatis加上maven作为项目管理&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;在项目工程中导入对应依赖上传工具包&quot;&gt;在项目工程中导入对应依赖上传工具包&lt;/h3&gt;
    &lt;blockquote&gt;
      &lt;p&gt;我这边使用的&lt;a href=&quot;http://maven.aliyun.com/nexus/#welcome&quot;&gt;阿里的maven远程中央库&lt;/a&gt;&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;!--上传组件依赖--&amp;gt;
  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;commons-fileupload&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;commons-fileupload&amp;lt;/artifactId&amp;gt;
      &amp;lt;version&amp;gt;1.3.1&amp;lt;/version&amp;gt;
  &amp;lt;/dependency&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;在spring配置文件中注入对应的文件上传解析器&quot;&gt;在spring配置文件中注入对应的文件上传解析器&lt;/h3&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;!--文件上传解析器--&amp;gt;
  &amp;lt;bean id=&quot;multipartResolver&quot;
  class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&amp;gt;
              &amp;lt;!--最大上传文件大小为5MB--&amp;gt;
              &amp;lt;property name=&quot;maxUploadSize&quot; value=&quot;5242880&quot;/&amp;gt;
  &amp;lt;/bean&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;创建bean-class-picuploadresult&quot;&gt;创建bean Class PicUploadResult&lt;/h3&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  public class PicUploadResult {
      private Integer error;
      private String url;
      private String width;
      private String height;
      public Integer getError() {
          return error;
      }
      public void setError(Integer error) {
          this.error = error;
      }
      public String getUrl() {
          return url;
      }
      public void setUrl(String url) {
          this.url = url;
      }
      public String getWidth() {
          return width;
      }
      public void setWidth(String width) {
          this.width = width;
      }
      public String getHeight() {
          return height;
      }
      public void setHeight(String height) {
          this.height = height;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;创建资源文件--imag_urlproperties&quot;&gt;创建资源文件  imag_url.properties&lt;/h3&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  REPOSITORY_PATH=/Users/liujunchen/Developer/JavaProject/liujipuzi/ljpz-upload
  IMAGE_BASE_URL=http://localhost:8080
  LJPZ_WEB_URL=http://localhost:8082
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;创建controller-class--picuploadcontroller&quot;&gt;创建controller Class  PicUploadController&lt;/h3&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  package com.ljpz.web.controller;
	
  import com.fasterxml.jackson.databind.ObjectMapper;
  import com.ljpz.common.bean.PicUploadResult;
  import com.ljpz.web.service.PropertieService;
  import org.apache.commons.lang3.RandomUtils;
  import org.apache.commons.lang3.StringUtils;
  import org.joda.time.DateTime;
  import org.slf4j.Logger;
  import org.slf4j.LoggerFactory;
  import org.springframework.beans.factory.annotation.Autowired;
  import org.springframework.http.MediaType;
  import org.springframework.stereotype.Controller;
  import org.springframework.web.bind.annotation.RequestMapping;
  import org.springframework.web.bind.annotation.RequestMethod;
  import org.springframework.web.bind.annotation.RequestParam;
  import org.springframework.web.bind.annotation.ResponseBody;
  import org.springframework.web.multipart.MultipartFile;
  import javax.imageio.ImageIO;
  import javax.servlet.http.HttpServletResponse;
  import java.awt.image.BufferedImage;
  import java.io.File;
  import java.io.IOException;
  import java.util.Date;
	
  /**
   * 图片上传
   */
  @Controller
  @RequestMapping(&quot;pic&quot;)
  public class PicUploadController {
      @Autowired
      private PropertieService propertieService  ;
	
      private static final Logger LOGGER = LoggerFactory.getLogger(PicUploadController.class);
	
      private static final ObjectMapper mapper = new ObjectMapper();
	
      // 允许上传的格式
      private static final String[] IMAGE_TYPE = new String[] { &quot;.bmp&quot;, &quot;.jpg&quot;, &quot;.jpeg&quot;, &quot;.gif&quot;, &quot;.png&quot;,&quot;.JPG&quot; };
	
      /**
       * 制定相应的类型
       * @param uploadFile
       * @param response
       * @return
       * @throws Exception
       */
      @RequestMapping(value = &quot;/upload&quot;, method = RequestMethod.POST, produces = MediaType.TEXT_PLAIN_VALUE)
      @ResponseBody
      public String  upload (@RequestParam(&quot;uploadFile&quot;) MultipartFile uploadFile , HttpServletResponse response) throws Exception {
	
          // 校验图片格式
          boolean isLegal = false;
          for (String type : IMAGE_TYPE) {
              if (StringUtils.endsWithIgnoreCase(uploadFile.getOriginalFilename(), type)) {
                  isLegal = true;
                  break;
              }
          }
	
          // 封装Result对象，并且将文件的byte数组放置到result对象中
          PicUploadResult fileUploadResult = new PicUploadResult();
	
          // 状态
          fileUploadResult.setError(isLegal ? 0 : 1);
	
          // 文件新路径
          String filePath = getFilePath(uploadFile.getOriginalFilename());
	
          if (LOGGER.isDebugEnabled()) {
              LOGGER.debug(&quot;Pic file upload .[{}] to [{}] .&quot;, uploadFile.getOriginalFilename(), filePath);
          }
	
          // 生成图片的绝对引用地址
          String picUrl = StringUtils.replace(StringUtils.substringAfter(filePath, propertieService.REPOSITORY_PATH), &quot;\\&quot;, &quot;/&quot;);
          fileUploadResult.setUrl(propertieService.IMAGE_BASE_URL + picUrl);
	
          File newFile = new File(filePath);
	
          // 写文件到磁盘
          uploadFile.transferTo(newFile);
	
          // 校验图片是否合法
          isLegal = false;
          try {
              BufferedImage image = ImageIO.read(newFile);
              if (image != null) {
                  fileUploadResult.setWidth(image.getWidth() + &quot;&quot;);
                  fileUploadResult.setHeight(image.getHeight() + &quot;&quot;);
                  isLegal = true;
              }
          } catch (IOException e) {
          }
	
          // 状态
          fileUploadResult.setError(isLegal ? 0 : 1);
	
          if (!isLegal) {
              // 不合法，将磁盘上的文件删除
              newFile.delete();
          }
	
          //将java对象序列化成Json字符串
          return mapper.writeValueAsString(fileUploadResult);
      }
	
      private String getFilePath(String sourceFileName) {
          String baseFolder = &quot;/Users/liujunchen/Developer/JavaProject/liujipuzi/ljpz-upload&quot; + File.separator + &quot;images&quot;;
          Date nowDate = new Date();
          // yyyy/MM/dd
          String fileFolder = baseFolder + File.separator + new DateTime(nowDate).toString(&quot;yyyy&quot;) + File.separator + new DateTime(nowDate).toString(&quot;MM&quot;) + File.separator
                  + new DateTime(nowDate).toString(&quot;dd&quot;);
          File file = new File(fileFolder);
          if (!file.isDirectory()) {
              // 如果目录不存在，则创建目录
              file.mkdirs();
          }
          // 生成新的文件名
          String fileName = new DateTime(nowDate).toString(&quot;yyyyMMddhhmmssSSSS&quot;) + RandomUtils.nextInt(100, 9999) + &quot;.&quot; + StringUtils.substringAfterLast(sourceFileName, &quot;.&quot;);
          return fileFolder + File.separator + fileName;
      }
	
  }
	
	
	
	
  * 在test的类里注射spring bean测试程序如下：
	
			
          @RunWith(SpringJUnit4ClassRunner.class)
          //加载配置文件
          @ContextConfiguration
                  ({&quot;/spring/applicationContext.xml&quot;,&quot;/spring/applicationContext-mybatis.xml&quot;})
          public class UserinfoServiceTest {
              private   static  final ObjectMapper   MAPPER = new ObjectMapper()   ;
              private   String  tojson   ;
              @Resource
              private   UserinfoService  userinfoService ;
			
              @Before
              public void setTojson() throws Exception {
                  //准备一条测试数据
                  this.tojson= MAPPER.writeValueAsString(
                          new Userinfo( new Long(109),&quot;junchen-test222&quot;,  &quot;1&quot;,  new Date(),
                                  &quot;刘俊辰&quot;,  &quot;大海&quot;, null, &quot;1&quot;, &quot;100000000&quot;, &quot;310107&quot;, &quot;本科&quot;, &quot;计算机test&quot;));
              }
              @Test
              public void createUserinfo() throws Exception {
                  userinfoService.createUserinfo(tojson)  ;
			
              }
			
              @Test
              public void updateUserinfo() throws Exception {
			
                   userinfoService.updateUserinfo(tojson);
              }
			
              @Test
              public void queryByNickname() throws Exception {
			
                 /* 传统办法
                  ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
                          &quot;spring/applicationContext.xml&quot;,&quot;spring/applicationContext-mybatis.xml&quot;);
                  UserinfoService  userinfoService=
                          applicationContext.getBean(&quot;userinfoService&quot;,UserinfoService.class)  ;*/
			
                  Userinfo userinfo   =  userinfoService.queryByNickname(new Long(9));
                  System.out.println(userinfo.toString());
	
      }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;在页面导入css以及kindedit工具js&quot;&gt;在页面导入css以及kindedit工具js&lt;/h3&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;%--上传组件--%&amp;gt;
  &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;/js/kindeditor-4.1.7/themes/default/default.css&quot; /&amp;gt;
  &amp;lt;script src=&quot;/js/kindeditor-4.1.7/kindeditor-min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;在页面中添加js代码自己也是刚刚接触前段简要的注释下调用的js过程&quot;&gt;在页面中添加js代码（自己也是刚刚接触前段简要的注释下调用的js过程）&lt;/h3&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;script&amp;gt;
         $(function() {
          var uploadbutton = KindEditor.uploadbutton({
              button : $('#uploadButton')[0],//上传button按钮
              fieldName : 'uploadFile',//类型为uploadFile这个是富文本插件参数
              url : '/service/pic/upload?dir=image',//送请求响应地址
                      afterUpload : function(data) {
                          if (data.error === 0) {
                              var url = KindEditor.formatUrl(data.url, 'absolute');
                              var tagurl= &quot;&amp;lt;img id='bigImage' name='bigImage' alt=''  width='150' height='150' src='&quot;+url+&quot;'&amp;gt;&quot;;
                              var   img2url   = &quot;&amp;lt;img id='midImage' width='100' height='100' name='midImage' src='&quot;+ url   + &quot;'&amp;gt;&quot;
                              var   img3url   = &quot;&amp;lt;img id='smaImage' width='50' height='50' name='smaImage' src='&quot;+ url   + &quot;'&amp;gt;&quot;
                              $('#url').val(url);
                              //在网页中添加更新上传头像
                              $(&quot;.img-b&quot;).html(tagurl)  ;
                              $(&quot;.img-s&quot;).eq(0).html(img2url)  ;
                              $(&quot;.img-s&quot;).eq(1).html(img3url)  ;
                          } else {
                              alert(data.message);
                  }
              },
              afterError : function(str) {
                  alert('自定义错误信息: ' + str);
              }
          });
          uploadbutton.fileBox.change(function(e) {
              uploadbutton.submit();
          });
      });
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;h3 id=&quot;js成功调用截图&quot;&gt;js成功调用截图&lt;/h3&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cl.ly/0o0U1A073S2I/Image%202017-02-23%20at%2010.19.41.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 21 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/21/imageupload/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/21/imageupload/</guid>
        
        <category>实用教程</category>
        
        <category>java</category>
        
        
      </item>
    
      <item>
        <title>用junit测试单个服务调用</title>
        <description>&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;em&gt;spring测试很费劲需要初始化bean才能进行测试， 这边介绍spring-test 配合junit来完成对应service的接口测试&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;测试环境搭建过程&quot;&gt;测试环境搭建过程&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;我本机环境是2014年 retina mac pro,编程工具为idea，项目中用的是maven，所以下面的介绍是基于maven的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在maven中添加对应spring 的测试的依赖包&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &amp;lt;dependency&amp;gt;
      &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;
      &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;
  &amp;lt;/dependency&amp;gt;

       &amp;lt;dependency&amp;gt;
              &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;
              &amp;lt;artifactId&amp;gt;spring-test&amp;lt;/artifactId&amp;gt;
              &amp;lt;version&amp;gt;4.1.3.RELEASE&amp;lt;/version&amp;gt;
          &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;找到测试类添加如下的注解注入bean&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;          @RunWith(SpringJUnit4ClassRunner.class)
          //加载配置文件
          @ContextConfiguration
                  ({&quot;/spring/applicationContext.xml&quot;,&quot;/spring/applicationContext-mybatis.xml&quot;})
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在test的类里注射spring bean测试程序如下：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  @RunWith(SpringJUnit4ClassRunner.class)
  //加载配置文件
  @ContextConfiguration
          ({&quot;/spring/applicationContext.xml&quot;,&quot;/spring/applicationContext-mybatis.xml&quot;})
  public class UserinfoServiceTest {
      private   static  final ObjectMapper   MAPPER = new ObjectMapper()   ;
      private   String  tojson   ;
      @Resource
      private   UserinfoService  userinfoService ;
	
      @Before
      public void setTojson() throws Exception {
          //准备一条测试数据
          this.tojson= MAPPER.writeValueAsString(
                  new Userinfo( new Long(109),&quot;junchen-test222&quot;,  &quot;1&quot;,  new Date(),
                          &quot;刘俊辰&quot;,  &quot;大海&quot;, null, &quot;1&quot;, &quot;100000000&quot;, &quot;310107&quot;, &quot;本科&quot;, &quot;计算机test&quot;));
      }
      @Test
      public void createUserinfo() throws Exception {
          userinfoService.createUserinfo(tojson)  ;
	
      }
	
      @Test
      public void updateUserinfo() throws Exception {
	
           userinfoService.updateUserinfo(tojson);
      }
	
      @Test
      public void queryByNickname() throws Exception {
	
         /* 传统办法
          ApplicationContext applicationContext = new ClassPathXmlApplicationContext(
                  &quot;spring/applicationContext.xml&quot;,&quot;spring/applicationContext-mybatis.xml&quot;);
          UserinfoService  userinfoService=
                  applicationContext.getBean(&quot;userinfoService&quot;,UserinfoService.class)  ;*/
	
          Userinfo userinfo   =  userinfoService.queryByNickname(new Long(9));
          System.out.println(userinfo.toString());

  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;运行你想运行test的程序就行。&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://cl.ly/2A3d0T1u2q1h/Image%202017-02-21%20at%2001.13.34.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 20 Feb 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/02/20/springtest-configuration/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/02/20/springtest-configuration/</guid>
        
        <category>实用教程</category>
        
        <category>java</category>
        
        
      </item>
    
  </channel>
</rss>
